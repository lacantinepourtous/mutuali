// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YellowDuck.Api.DbModel;

namespace YellowDuck.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230220132639_AddModalClosedOnUserProfile")]
    partial class AddModalClosedOnUserProfile
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FriendlyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Xml")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Ads.Ad", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<bool>("CanHaveDriver")
                        .HasColumnType("bit");

                    b.Property<bool>("CanSharedRoad")
                        .HasColumnType("bit");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAtUTC")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveryTruckType")
                        .HasColumnType("int");

                    b.Property<bool>("IsPublish")
                        .HasColumnType("bit");

                    b.Property<string>("Organization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<bool>("PriceToBeDetermined")
                        .HasColumnType("bit");

                    b.Property<bool>("Refrigerated")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowAddress")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Ads");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Ads.AdAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("Locality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Neighborhood")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Raw")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Route")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sublocality")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id", "Latitude", "Longitude")
                        .IsUnique();

                    b.ToTable("AdAddress");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Ads.AdDayAvailability", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AdId")
                        .HasColumnType("bigint");

                    b.Property<int>("Weekday")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdId");

                    b.ToTable("AdDayAvailabilityWeekdays");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Ads.AdEveningAvailability", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AdId")
                        .HasColumnType("bigint");

                    b.Property<int>("Weekday")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdId");

                    b.ToTable("AdEveningAvailabilityWeekdays");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Ads.AdGalleryItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AdId")
                        .HasColumnType("bigint");

                    b.Property<string>("Alt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureFileId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdId");

                    b.ToTable("AdGalleryItems");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Ads.AdProfessionalKitchenEquipment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AdId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProfessionalKitchenEquipment")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdId");

                    b.ToTable("AdProfessionalKitchenEquipments");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Ads.AdTranslation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AdId")
                        .HasColumnType("bigint");

                    b.Property<string>("Conditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryTruckTypeOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Equipment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<string>("PriceDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessionalKitchenEquipmentOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurfaceDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurfaceSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdId", "Language")
                        .IsUnique();

                    b.ToTable("AdTranslations");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AcceptedTos")
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("FirstLoginModalClosed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TosAcceptationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TosAcceptationIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Contracts.Contract", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ConversationId")
                        .HasColumnType("bigint");

                    b.Property<string>("DatePrecision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Terms")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TenantId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Contracts.ContractFileItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ContractId")
                        .HasColumnType("bigint");

                    b.Property<string>("FileId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("ContractFiles");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Conversations.Conversation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AdId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ContractId")
                        .HasColumnType("bigint");

                    b.Property<string>("Sid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdId");

                    b.HasIndex("ContractId")
                        .IsUnique()
                        .HasFilter("[ContractId] IS NOT NULL");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Conversations.ConversationParticipant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ConversationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Sid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("ConversationId", "Sid")
                        .IsUnique()
                        .HasFilter("[Sid] IS NOT NULL");

                    b.ToTable("ConversationParticipants");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Notifications.ConversationNotification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ConversationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotificationCreator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ConversationNotifications");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Payment.CheckoutSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CheckoutSessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ContractId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContractId")
                        .IsUnique();

                    b.ToTable("CheckoutSessions");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Payment.Payout", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ContractId")
                        .HasColumnType("bigint");

                    b.Property<string>("TransferId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContractId")
                        .IsUnique();

                    b.ToTable("Payouts");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Payment.StripeAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StripeAccountId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("StripeAccounts");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Profiles.UserProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ContactAuthorizationNews")
                        .HasColumnType("bit");

                    b.Property<bool>("ContactAuthorizationSurveys")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Industry")
                        .HasColumnType("int");

                    b.Property<string>("IndustryOtherSpecification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganizationType")
                        .HasColumnType("int");

                    b.Property<string>("OrganizationTypeOtherSpecification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowPhoneNumber")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Profiles.UserProfileRegisteringInterest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RegisteringInterest")
                        .HasColumnType("int");

                    b.Property<long>("UserProfileId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("UserProfileRegisteringInterest");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Ratings.AdRating", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AdId")
                        .HasColumnType("bigint");

                    b.Property<int>("CleanlinessRating")
                        .HasColumnType("int");

                    b.Property<int>("ComplianceRating")
                        .HasColumnType("int");

                    b.Property<long>("ContractId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("RaterUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SecurityRating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdId");

                    b.HasIndex("ContractId")
                        .IsUnique();

                    b.HasIndex("RaterUserId");

                    b.ToTable("AdRatings");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Ratings.UserRating", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommunicationRating")
                        .HasColumnType("int");

                    b.Property<long>("ContractId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("FiabilityRating")
                        .HasColumnType("int");

                    b.Property<string>("RaterUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RespectRating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("RaterUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRatings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("YellowDuck.Api.DbModel.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("YellowDuck.Api.DbModel.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YellowDuck.Api.DbModel.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("YellowDuck.Api.DbModel.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Ads.Ad", b =>
                {
                    b.HasOne("YellowDuck.Api.DbModel.Entities.Ads.AdAddress", "Address")
                        .WithOne("Ad")
                        .HasForeignKey("YellowDuck.Api.DbModel.Entities.Ads.Ad", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YellowDuck.Api.DbModel.Entities.AppUser", "User")
                        .WithMany("Ads")
                        .HasForeignKey("UserId");

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Ads.AdDayAvailability", b =>
                {
                    b.HasOne("YellowDuck.Api.DbModel.Entities.Ads.Ad", "Ad")
                        .WithMany("DayAvailability")
                        .HasForeignKey("AdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ad");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Ads.AdEveningAvailability", b =>
                {
                    b.HasOne("YellowDuck.Api.DbModel.Entities.Ads.Ad", "Ad")
                        .WithMany("EveningAvailability")
                        .HasForeignKey("AdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ad");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Ads.AdGalleryItem", b =>
                {
                    b.HasOne("YellowDuck.Api.DbModel.Entities.Ads.Ad", null)
                        .WithMany("Gallery")
                        .HasForeignKey("AdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Ads.AdProfessionalKitchenEquipment", b =>
                {
                    b.HasOne("YellowDuck.Api.DbModel.Entities.Ads.Ad", "Ad")
                        .WithMany("ProfessionalKitchenEquipments")
                        .HasForeignKey("AdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ad");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Ads.AdTranslation", b =>
                {
                    b.HasOne("YellowDuck.Api.DbModel.Entities.Ads.Ad", "Ad")
                        .WithMany("Translations")
                        .HasForeignKey("AdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ad");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Contracts.Contract", b =>
                {
                    b.HasOne("YellowDuck.Api.DbModel.Entities.AppUser", "Owner")
                        .WithMany("OwnerContracts")
                        .HasForeignKey("OwnerId");

                    b.HasOne("YellowDuck.Api.DbModel.Entities.AppUser", "Tenant")
                        .WithMany("TenantContracts")
                        .HasForeignKey("TenantId");

                    b.Navigation("Owner");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Contracts.ContractFileItem", b =>
                {
                    b.HasOne("YellowDuck.Api.DbModel.Entities.Contracts.Contract", null)
                        .WithMany("Files")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Conversations.Conversation", b =>
                {
                    b.HasOne("YellowDuck.Api.DbModel.Entities.Ads.Ad", "Ad")
                        .WithMany()
                        .HasForeignKey("AdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YellowDuck.Api.DbModel.Entities.Contracts.Contract", "Contract")
                        .WithOne("Conversation")
                        .HasForeignKey("YellowDuck.Api.DbModel.Entities.Conversations.Conversation", "ContractId");

                    b.Navigation("Ad");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Conversations.ConversationParticipant", b =>
                {
                    b.HasOne("YellowDuck.Api.DbModel.Entities.Conversations.Conversation", null)
                        .WithMany("Participants")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YellowDuck.Api.DbModel.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Payment.CheckoutSession", b =>
                {
                    b.HasOne("YellowDuck.Api.DbModel.Entities.Contracts.Contract", "Contract")
                        .WithOne("CheckoutSession")
                        .HasForeignKey("YellowDuck.Api.DbModel.Entities.Payment.CheckoutSession", "ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Payment.Payout", b =>
                {
                    b.HasOne("YellowDuck.Api.DbModel.Entities.Contracts.Contract", "Contract")
                        .WithOne("Payout")
                        .HasForeignKey("YellowDuck.Api.DbModel.Entities.Payment.Payout", "ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Payment.StripeAccount", b =>
                {
                    b.HasOne("YellowDuck.Api.DbModel.Entities.AppUser", "User")
                        .WithOne("StripeAccount")
                        .HasForeignKey("YellowDuck.Api.DbModel.Entities.Payment.StripeAccount", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Profiles.UserProfile", b =>
                {
                    b.HasOne("YellowDuck.Api.DbModel.Entities.AppUser", "User")
                        .WithOne("Profile")
                        .HasForeignKey("YellowDuck.Api.DbModel.Entities.Profiles.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Profiles.UserProfileRegisteringInterest", b =>
                {
                    b.HasOne("YellowDuck.Api.DbModel.Entities.Profiles.UserProfile", "UserProfile")
                        .WithMany("RegisteringInterests")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Ratings.AdRating", b =>
                {
                    b.HasOne("YellowDuck.Api.DbModel.Entities.Ads.Ad", "Ad")
                        .WithMany("AdRatings")
                        .HasForeignKey("AdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YellowDuck.Api.DbModel.Entities.Contracts.Contract", "Contract")
                        .WithOne("AdRating")
                        .HasForeignKey("YellowDuck.Api.DbModel.Entities.Ratings.AdRating", "ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YellowDuck.Api.DbModel.Entities.AppUser", "RaterUser")
                        .WithMany()
                        .HasForeignKey("RaterUserId");

                    b.Navigation("Ad");

                    b.Navigation("Contract");

                    b.Navigation("RaterUser");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Ratings.UserRating", b =>
                {
                    b.HasOne("YellowDuck.Api.DbModel.Entities.Contracts.Contract", "Contract")
                        .WithMany("UserRatings")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YellowDuck.Api.DbModel.Entities.AppUser", "RaterUser")
                        .WithMany()
                        .HasForeignKey("RaterUserId");

                    b.HasOne("YellowDuck.Api.DbModel.Entities.AppUser", "User")
                        .WithMany("UserRatings")
                        .HasForeignKey("UserId");

                    b.Navigation("Contract");

                    b.Navigation("RaterUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Ads.Ad", b =>
                {
                    b.Navigation("AdRatings");

                    b.Navigation("DayAvailability");

                    b.Navigation("EveningAvailability");

                    b.Navigation("Gallery");

                    b.Navigation("ProfessionalKitchenEquipments");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Ads.AdAddress", b =>
                {
                    b.Navigation("Ad");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.AppUser", b =>
                {
                    b.Navigation("Ads");

                    b.Navigation("OwnerContracts");

                    b.Navigation("Profile");

                    b.Navigation("StripeAccount");

                    b.Navigation("TenantContracts");

                    b.Navigation("UserRatings");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Contracts.Contract", b =>
                {
                    b.Navigation("AdRating");

                    b.Navigation("CheckoutSession");

                    b.Navigation("Conversation");

                    b.Navigation("Files");

                    b.Navigation("Payout");

                    b.Navigation("UserRatings");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Conversations.Conversation", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("YellowDuck.Api.DbModel.Entities.Profiles.UserProfile", b =>
                {
                    b.Navigation("RegisteringInterests");
                });
#pragma warning restore 612, 618
        }
    }
}
